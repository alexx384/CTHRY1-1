
Grammar
rule 1    string -> CHAR
rule 2    string -> string CHAR
rule 3    string -> INT
rule 4    string -> string INT
rule 5    variable -> '_' string '_'
rule 6    operation -> expr_equal
rule 7    expr_equal -> expr_add '=' expr_equal
rule 8    expr_equal -> expr_add
rule 9    expr_add -> expr_mul
rule 10   expr_add -> expr_add '+' expr_mul
rule 11   expr_add -> expr_add '-' expr_mul
rule 12   expr_mul -> expr_mul CHAR
rule 13   expr_mul -> expr_pow
rule 14   expr_mul -> expr_mul '*' expr_pow
rule 15   expr_pow -> primary
rule 16   expr_pow -> primary '^' expr_pow
rule 17   expr_pow -> '-' primary
rule 18   expr_pow -> '-' primary '^' expr_pow
rule 19   primary -> CHAR
rule 20   primary -> REAL
rule 21   primary -> INT
rule 22   primary -> variable
rule 23   primary -> '(' expr_add ')'

Terminals, with rules where they appear

$ (-1)
'(' (40) 23
')' (41) 23
'*' (42) 14
'+' (43) 10
'-' (45) 11 17 18
'=' (61) 7
'^' (94) 16 18
'_' (95) 5
error (256)
REAL (258) 20
INT (259) 3 4 21
CHAR (260) 1 2 12 19

Nonterminals, with rules where they appear

string (14)
    on left: 1 2 3 4, on right: 2 4 5
variable (15)
    on left: 5, on right: 22
operation (16)
    on left: 6
expr_equal (17)
    on left: 7 8, on right: 6 7
expr_add (18)
    on left: 9 10 11, on right: 7 8 10 11 23
expr_mul (19)
    on left: 12 13 14, on right: 9 10 11 12 14
expr_pow (20)
    on left: 15 16 17 18, on right: 13 14 16 18
primary (21)
    on left: 19 20 21 22 23, on right: 15 16 17 18


state 0

    REAL	shift, and go to state 1
    INT 	shift, and go to state 2
    CHAR	shift, and go to state 3
    '_' 	shift, and go to state 4
    '-' 	shift, and go to state 5
    '(' 	shift, and go to state 6

    variable	go to state 7
    operation	go to state 35
    expr_equal	go to state 8
    expr_add	go to state 9
    expr_mul	go to state 10
    expr_pow	go to state 11
    primary	go to state 12



state 1

    primary  ->  REAL .   (rule 20)

    $default	reduce using rule 20 (primary)



state 2

    primary  ->  INT .   (rule 21)

    $default	reduce using rule 21 (primary)



state 3

    primary  ->  CHAR .   (rule 19)

    $default	reduce using rule 19 (primary)



state 4

    variable  ->  '_' . string '_'   (rule 5)

    INT 	shift, and go to state 13
    CHAR	shift, and go to state 14

    string	go to state 15



state 5

    expr_pow  ->  '-' . primary   (rule 17)
    expr_pow  ->  '-' . primary '^' expr_pow   (rule 18)

    REAL	shift, and go to state 1
    INT 	shift, and go to state 2
    CHAR	shift, and go to state 3
    '_' 	shift, and go to state 4
    '(' 	shift, and go to state 6

    variable	go to state 7
    primary	go to state 16



state 6

    primary  ->  '(' . expr_add ')'   (rule 23)

    REAL	shift, and go to state 1
    INT 	shift, and go to state 2
    CHAR	shift, and go to state 3
    '_' 	shift, and go to state 4
    '-' 	shift, and go to state 5
    '(' 	shift, and go to state 6

    variable	go to state 7
    expr_add	go to state 17
    expr_mul	go to state 10
    expr_pow	go to state 11
    primary	go to state 12



state 7

    primary  ->  variable .   (rule 22)

    $default	reduce using rule 22 (primary)



state 8

    operation  ->  expr_equal .   (rule 6)

    $default	reduce using rule 6 (operation)



state 9

    expr_equal  ->  expr_add . '=' expr_equal   (rule 7)
    expr_equal  ->  expr_add .   (rule 8)
    expr_add  ->  expr_add . '+' expr_mul   (rule 10)
    expr_add  ->  expr_add . '-' expr_mul   (rule 11)

    '=' 	shift, and go to state 18
    '+' 	shift, and go to state 19
    '-' 	shift, and go to state 20

    $default	reduce using rule 8 (expr_equal)



state 10

    expr_add  ->  expr_mul .   (rule 9)
    expr_mul  ->  expr_mul . CHAR   (rule 12)
    expr_mul  ->  expr_mul . '*' expr_pow   (rule 14)

    CHAR	shift, and go to state 21
    '*' 	shift, and go to state 22

    $default	reduce using rule 9 (expr_add)



state 11

    expr_mul  ->  expr_pow .   (rule 13)

    $default	reduce using rule 13 (expr_mul)



state 12

    expr_pow  ->  primary .   (rule 15)
    expr_pow  ->  primary . '^' expr_pow   (rule 16)

    '^' 	shift, and go to state 23

    $default	reduce using rule 15 (expr_pow)



state 13

    string  ->  INT .   (rule 3)

    $default	reduce using rule 3 (string)



state 14

    string  ->  CHAR .   (rule 1)

    $default	reduce using rule 1 (string)



state 15

    string  ->  string . CHAR   (rule 2)
    string  ->  string . INT   (rule 4)
    variable  ->  '_' string . '_'   (rule 5)

    INT 	shift, and go to state 24
    CHAR	shift, and go to state 25
    '_' 	shift, and go to state 26



state 16

    expr_pow  ->  '-' primary .   (rule 17)
    expr_pow  ->  '-' primary . '^' expr_pow   (rule 18)

    '^' 	shift, and go to state 27

    $default	reduce using rule 17 (expr_pow)



state 17

    expr_add  ->  expr_add . '+' expr_mul   (rule 10)
    expr_add  ->  expr_add . '-' expr_mul   (rule 11)
    primary  ->  '(' expr_add . ')'   (rule 23)

    '+' 	shift, and go to state 19
    '-' 	shift, and go to state 20
    ')' 	shift, and go to state 28



state 18

    expr_equal  ->  expr_add '=' . expr_equal   (rule 7)

    REAL	shift, and go to state 1
    INT 	shift, and go to state 2
    CHAR	shift, and go to state 3
    '_' 	shift, and go to state 4
    '-' 	shift, and go to state 5
    '(' 	shift, and go to state 6

    variable	go to state 7
    expr_equal	go to state 29
    expr_add	go to state 9
    expr_mul	go to state 10
    expr_pow	go to state 11
    primary	go to state 12



state 19

    expr_add  ->  expr_add '+' . expr_mul   (rule 10)

    REAL	shift, and go to state 1
    INT 	shift, and go to state 2
    CHAR	shift, and go to state 3
    '_' 	shift, and go to state 4
    '-' 	shift, and go to state 5
    '(' 	shift, and go to state 6

    variable	go to state 7
    expr_mul	go to state 30
    expr_pow	go to state 11
    primary	go to state 12



state 20

    expr_add  ->  expr_add '-' . expr_mul   (rule 11)

    REAL	shift, and go to state 1
    INT 	shift, and go to state 2
    CHAR	shift, and go to state 3
    '_' 	shift, and go to state 4
    '-' 	shift, and go to state 5
    '(' 	shift, and go to state 6

    variable	go to state 7
    expr_mul	go to state 31
    expr_pow	go to state 11
    primary	go to state 12



state 21

    expr_mul  ->  expr_mul CHAR .   (rule 12)

    $default	reduce using rule 12 (expr_mul)



state 22

    expr_mul  ->  expr_mul '*' . expr_pow   (rule 14)

    REAL	shift, and go to state 1
    INT 	shift, and go to state 2
    CHAR	shift, and go to state 3
    '_' 	shift, and go to state 4
    '-' 	shift, and go to state 5
    '(' 	shift, and go to state 6

    variable	go to state 7
    expr_pow	go to state 32
    primary	go to state 12



state 23

    expr_pow  ->  primary '^' . expr_pow   (rule 16)

    REAL	shift, and go to state 1
    INT 	shift, and go to state 2
    CHAR	shift, and go to state 3
    '_' 	shift, and go to state 4
    '-' 	shift, and go to state 5
    '(' 	shift, and go to state 6

    variable	go to state 7
    expr_pow	go to state 33
    primary	go to state 12



state 24

    string  ->  string INT .   (rule 4)

    $default	reduce using rule 4 (string)



state 25

    string  ->  string CHAR .   (rule 2)

    $default	reduce using rule 2 (string)



state 26

    variable  ->  '_' string '_' .   (rule 5)

    $default	reduce using rule 5 (variable)



state 27

    expr_pow  ->  '-' primary '^' . expr_pow   (rule 18)

    REAL	shift, and go to state 1
    INT 	shift, and go to state 2
    CHAR	shift, and go to state 3
    '_' 	shift, and go to state 4
    '-' 	shift, and go to state 5
    '(' 	shift, and go to state 6

    variable	go to state 7
    expr_pow	go to state 34
    primary	go to state 12



state 28

    primary  ->  '(' expr_add ')' .   (rule 23)

    $default	reduce using rule 23 (primary)



state 29

    expr_equal  ->  expr_add '=' expr_equal .   (rule 7)

    $default	reduce using rule 7 (expr_equal)



state 30

    expr_add  ->  expr_add '+' expr_mul .   (rule 10)
    expr_mul  ->  expr_mul . CHAR   (rule 12)
    expr_mul  ->  expr_mul . '*' expr_pow   (rule 14)

    CHAR	shift, and go to state 21
    '*' 	shift, and go to state 22

    $default	reduce using rule 10 (expr_add)



state 31

    expr_add  ->  expr_add '-' expr_mul .   (rule 11)
    expr_mul  ->  expr_mul . CHAR   (rule 12)
    expr_mul  ->  expr_mul . '*' expr_pow   (rule 14)

    CHAR	shift, and go to state 21
    '*' 	shift, and go to state 22

    $default	reduce using rule 11 (expr_add)



state 32

    expr_mul  ->  expr_mul '*' expr_pow .   (rule 14)

    $default	reduce using rule 14 (expr_mul)



state 33

    expr_pow  ->  primary '^' expr_pow .   (rule 16)

    $default	reduce using rule 16 (expr_pow)



state 34

    expr_pow  ->  '-' primary '^' expr_pow .   (rule 18)

    $default	reduce using rule 18 (expr_pow)



state 35

    $   	go to state 36



state 36

    $   	go to state 37



state 37

    $default	accept
