
Grammar
rule 1    expr_add -> expr_mul
rule 2    expr_add -> expr_add '+' expr_mul
rule 3    expr_add -> expr_add '-' expr_mul
rule 4    expr_mul -> expr_mul ALPHA
rule 5    expr_mul -> expr_pow
rule 6    expr_mul -> expr_mul '*' expr_pow
rule 7    expr_pow -> primary
rule 8    expr_pow -> primary '^' expr_pow
rule 9    expr_pow -> '-' primary
rule 10   expr_pow -> '-' primary '^' expr_pow
rule 11   primary -> ALPHA
rule 12   primary -> CONST
rule 13   primary -> '(' expr_add ')'

Terminals, with rules where they appear

$ (-1)
'(' (40) 13
')' (41) 13
'*' (42) 6
'+' (43) 2
'-' (45) 3 9 10
'^' (94) 8 10
error (256)
CONST (258) 12
ALPHA (259) 4 11

Nonterminals, with rules where they appear

expr_add (11)
    on left: 1 2 3, on right: 2 3 13
expr_mul (12)
    on left: 4 5 6, on right: 1 2 3 4 6
expr_pow (13)
    on left: 7 8 9 10, on right: 5 6 8 10
primary (14)
    on left: 11 12 13, on right: 7 8 9 10


state 0

    CONST	shift, and go to state 1
    ALPHA	shift, and go to state 2
    '-' 	shift, and go to state 3
    '(' 	shift, and go to state 4

    expr_add	go to state 5
    expr_mul	go to state 6
    expr_pow	go to state 7
    primary	go to state 8



state 1

    primary  ->  CONST .   (rule 12)

    $default	reduce using rule 12 (primary)



state 2

    primary  ->  ALPHA .   (rule 11)

    $default	reduce using rule 11 (primary)



state 3

    expr_pow  ->  '-' . primary   (rule 9)
    expr_pow  ->  '-' . primary '^' expr_pow   (rule 10)

    CONST	shift, and go to state 1
    ALPHA	shift, and go to state 2
    '(' 	shift, and go to state 4

    primary	go to state 9



state 4

    primary  ->  '(' . expr_add ')'   (rule 13)

    CONST	shift, and go to state 1
    ALPHA	shift, and go to state 2
    '-' 	shift, and go to state 3
    '(' 	shift, and go to state 4

    expr_add	go to state 10
    expr_mul	go to state 6
    expr_pow	go to state 7
    primary	go to state 8



state 5

    expr_add  ->  expr_add . '+' expr_mul   (rule 2)
    expr_add  ->  expr_add . '-' expr_mul   (rule 3)

    $   	go to state 23
    '+' 	shift, and go to state 11
    '-' 	shift, and go to state 12



state 6

    expr_add  ->  expr_mul .   (rule 1)
    expr_mul  ->  expr_mul . ALPHA   (rule 4)
    expr_mul  ->  expr_mul . '*' expr_pow   (rule 6)

    ALPHA	shift, and go to state 13
    '*' 	shift, and go to state 14

    $default	reduce using rule 1 (expr_add)



state 7

    expr_mul  ->  expr_pow .   (rule 5)

    $default	reduce using rule 5 (expr_mul)



state 8

    expr_pow  ->  primary .   (rule 7)
    expr_pow  ->  primary . '^' expr_pow   (rule 8)

    '^' 	shift, and go to state 15

    $default	reduce using rule 7 (expr_pow)



state 9

    expr_pow  ->  '-' primary .   (rule 9)
    expr_pow  ->  '-' primary . '^' expr_pow   (rule 10)

    '^' 	shift, and go to state 16

    $default	reduce using rule 9 (expr_pow)



state 10

    expr_add  ->  expr_add . '+' expr_mul   (rule 2)
    expr_add  ->  expr_add . '-' expr_mul   (rule 3)
    primary  ->  '(' expr_add . ')'   (rule 13)

    '+' 	shift, and go to state 11
    '-' 	shift, and go to state 12
    ')' 	shift, and go to state 17



state 11

    expr_add  ->  expr_add '+' . expr_mul   (rule 2)

    CONST	shift, and go to state 1
    ALPHA	shift, and go to state 2
    '-' 	shift, and go to state 3
    '(' 	shift, and go to state 4

    expr_mul	go to state 18
    expr_pow	go to state 7
    primary	go to state 8



state 12

    expr_add  ->  expr_add '-' . expr_mul   (rule 3)

    CONST	shift, and go to state 1
    ALPHA	shift, and go to state 2
    '-' 	shift, and go to state 3
    '(' 	shift, and go to state 4

    expr_mul	go to state 19
    expr_pow	go to state 7
    primary	go to state 8



state 13

    expr_mul  ->  expr_mul ALPHA .   (rule 4)

    $default	reduce using rule 4 (expr_mul)



state 14

    expr_mul  ->  expr_mul '*' . expr_pow   (rule 6)

    CONST	shift, and go to state 1
    ALPHA	shift, and go to state 2
    '-' 	shift, and go to state 3
    '(' 	shift, and go to state 4

    expr_pow	go to state 20
    primary	go to state 8



state 15

    expr_pow  ->  primary '^' . expr_pow   (rule 8)

    CONST	shift, and go to state 1
    ALPHA	shift, and go to state 2
    '-' 	shift, and go to state 3
    '(' 	shift, and go to state 4

    expr_pow	go to state 21
    primary	go to state 8



state 16

    expr_pow  ->  '-' primary '^' . expr_pow   (rule 10)

    CONST	shift, and go to state 1
    ALPHA	shift, and go to state 2
    '-' 	shift, and go to state 3
    '(' 	shift, and go to state 4

    expr_pow	go to state 22
    primary	go to state 8



state 17

    primary  ->  '(' expr_add ')' .   (rule 13)

    $default	reduce using rule 13 (primary)



state 18

    expr_add  ->  expr_add '+' expr_mul .   (rule 2)
    expr_mul  ->  expr_mul . ALPHA   (rule 4)
    expr_mul  ->  expr_mul . '*' expr_pow   (rule 6)

    ALPHA	shift, and go to state 13
    '*' 	shift, and go to state 14

    $default	reduce using rule 2 (expr_add)



state 19

    expr_add  ->  expr_add '-' expr_mul .   (rule 3)
    expr_mul  ->  expr_mul . ALPHA   (rule 4)
    expr_mul  ->  expr_mul . '*' expr_pow   (rule 6)

    ALPHA	shift, and go to state 13
    '*' 	shift, and go to state 14

    $default	reduce using rule 3 (expr_add)



state 20

    expr_mul  ->  expr_mul '*' expr_pow .   (rule 6)

    $default	reduce using rule 6 (expr_mul)



state 21

    expr_pow  ->  primary '^' expr_pow .   (rule 8)

    $default	reduce using rule 8 (expr_pow)



state 22

    expr_pow  ->  '-' primary '^' expr_pow .   (rule 10)

    $default	reduce using rule 10 (expr_pow)



state 23

    $   	go to state 24



state 24

    $default	accept
